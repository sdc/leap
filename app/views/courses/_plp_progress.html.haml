- npr = Settings.num_progress_reviews.to_i

- par_dates = []
- Settings.par_date_ranges.split("|").each{|x| b=x.split(';'); par_dates << { :rev => b[0], :from => b[1], :to => b[2] } if ( b[3].blank? || b[3] == @topic.year ) }

-# Look at only 'Active, CompNoResult, CompNotAch, CompAch, CompPart, CompNoResult, CompAchNoFund'
- per_ids = @person_courses.map{ |x| (["active", "compnoresult", "compnotach", "compach", "comppart", "compnoresult", "compachnofund"].include? x[:mis_status].try(:downcase)) ? x[:person_id] : nil }.compact

- d_par_from = Date.strptime(par_dates.min_by{ |f| f[:from].to_date }[:from],"%d/%m/%Y").strftime("%Y-%m-%d") || MISC::MiscDates.startdate_from_acyr(@topic.year)
- d_par_to = Date.strptime(par_dates.max_by{ |f| f[:to].to_date }[:to],"%d/%m/%Y").strftime("%Y-%m-%d") || MISC::MiscDates.enddate_from_acyr(@topic.year)
- att_overall_count = Attendance.where( :person_id => per_ids ).where(:course_type => "overall").where("week_beginning between str_to_date(?,'%Y-%m-%d') and str_to_date(?,'%Y-%m-%d')", d_par_from, d_par_to ).count
- att_overall_count = 1 if att_overall_count == 0
- att_core_count = Attendance.where( :person_id => per_ids ).where(:course_type => "core").where("week_beginning between str_to_date(?,'%Y-%m-%d') and str_to_date(?,'%Y-%m-%d')", d_par_from, d_par_to ).count
- att_course_count = Attendance.where( :person_id => per_ids ).where( "lower(attendances.enrol_course) = ? ", @topic.code.to_s.downcase).where("week_beginning between str_to_date(?,'%Y-%m-%d') and str_to_date(?,'%Y-%m-%d')", d_par_from, d_par_to ).count

.scroll-x
  #scroll-progress-plp-table.table-scroll
    .table-scroll-wrap
      %table#progress-plp-table.table.table-hover.table-condensed.table-scroll-main
        %thead
          %tr
            %th.table-scroll-fixed-side.text-left{ :style => "width:1px" }
            - if att_overall_count > 0
              %th.text-left.bl{ :title => "Attendance overall", :style => 'vertical-align: top' } Attendance (Study&nbspProgramme)
            - if att_core_count > 0
              %th.text-left.bl{ :title => "Attendance for core", :style => 'vertical-align: top' } Attendance (Core)
            - if att_course_count > 0
              %th.text-left.bl{ :title => "Attendance for course", :style => 'vertical-align: top' } Attendance (#{@topic.code.to_s.upcase})
            %th.text-left.bl{ :title => "Progress", :style => 'vertical-align: top' } Progress (Study&nbspProgramme)
            %th.text-left.bl{ :title => "Function Skills Attendance", :style => 'vertical-align: top' } Attendance (Functional&nbsp;Skills)
            %th.text-left.bl{ :title => "Function Skills Achievement", :style => 'vertical-align: top' } Achievement (Functional&nbsp;Skills)
          %tr
            %th.table-scroll-fixed-side.text-left{ :style => "width:1px" }
            - if att_overall_count > 0
              %th.text-left.bl{ :title => "Attendance overall", :style => 'vertical-align: top' }
                %p{:style => 'font-weight: normal'}
                  Target: 90%
                  %br
                  = render :partial => "courses/plp_att_key"
            - if att_core_count > 0
              %th.text-left.bl{ :title => "Attendance for core", :style => 'vertical-align: top' }
                %p{:style => 'font-weight: normal'}
                  Target: 90%
                  %br
                  = render :partial => "courses/plp_att_key"
            - if att_course_count > 0
              %th.text-left.bl{ :title => "Attendance for course", :style => 'vertical-align: top' }
                %p{:style => 'font-weight: normal'}
                  Target: 90%
                  %br
                  = render :partial => "courses/plp_att_key"
            %th.text-left.bl{ :title => "Progress", :style => 'vertical-align: top' }
              %p{:style => 'font-weight: normal'}
                Target: 75%
                %br Learners at or above grade
                %table.plp_key.table-condensed.table-borderless
                  %tbody
                    %tr.ragp_light_green
                      %td GREEN
                      %td at or above 75%
                    %tr.ragp_light_red
                      %td RED
                      %td below 75%
            %th.text-left.bl{ :title => "Function Skills Attendance", :style => 'vertical-align: top' }
              %p{:style => 'font-weight: normal'}
                Target: 90%
                %br
                = render :partial => "courses/plp_att_key"
            %th.text-left.bl{ :title => "Function Skills Achievement", :style => 'vertical-align: top' }
              %p{:style => 'font-weight: normal'}
                Target: 50%
                %table.plp_key.table-condensed.table-borderless
                  %tbody
                    %tr.ragp_light_green
                      %td GREEN
                      %td at or above 50%
                    %tr.ragp_light_red
                      %td RED
                      %td below 50%

        %tbody
          - ["I", *("1"..npr.to_s)].each do |x|
            - d = par_dates.detect { |dt| dt[:rev] == x }
            - d_from = (d.present? && d[:from].present? && Date.strptime(d[:from],"%d/%m/%Y").strftime("%Y-%m-%d")) ? Date.strptime(d[:from],"%d/%m/%Y").strftime("%Y-%m-%d") : MISC::MiscDates.startdate_from_acyr(@topic.year)
            - d_to = (d.present? && d[:to].present? && Date.strptime(d[:to],"%d/%m/%Y").strftime("%Y-%m-%d")) ? Date.strptime(d[:to],"%d/%m/%Y").strftime("%Y-%m-%d") : MISC::MiscDates.enddate_from_acyr(@topic.year)
            %tr
              %th.table-scroll-fixed-side.text-left{ :style => "width:1px" }
                .plp_progress_row_title
                  - if x == "I"
                    Induction
                  - else 
                    PAR #{x}
                .plp_progress_row_dates
                  - if d.present? && d[:from].present?
                    #{d[:from]}
                  - if d.present? && d[:to].present?
                    to #{d[:to]}

              - if att_overall_count > 0
                -# [Attendance (Overall)] Average of 'Overall' attendance. Should this be x[:course_type] => "overall" or "core" or "english" or "maths" or x.enrol_course.to_s.downcase == @topic.code.to_s.downcase
                - num_att_week_overall = Attendance.where( :person_id => per_ids ).where(:course_type => "overall").where("week_beginning between str_to_date(?,'%Y-%m-%d') and str_to_date(?,'%Y-%m-%d')", d_from, d_to ).select("sum(attendances.att_week) as sum_att_week, count(*) as num").first
                - att_week_overall_avg = (num_att_week_overall[:num] > 0) ? (num_att_week_overall[:sum_att_week]/num_att_week_overall[:num]) : 0

                %td.text-right.bl{ :title => "Attendance overall from #{num_att_week_overall[:num]} entries", :class => Attendance.get_status(att_week_overall_avg,true) }
                  #{att_week_overall_avg}%

              - if att_core_count > 0
                -# [Attendance (Core)] Average of 'Core' attendance. Should this be x[:course_type] => "overall" or "core" or "english" or "maths" or x.enrol_course.to_s.downcase == @topic.code.to_s.downcase
                - num_att_week_core = Attendance.where( :person_id => per_ids ).where(:course_type => "core").where("week_beginning between str_to_date(?,'%Y-%m-%d') and str_to_date(?,'%Y-%m-%d')", d_from, d_to ).select("sum(attendances.att_week) as sum_att_week, count(*) as num").first
                - att_week_core_avg = (num_att_week_core[:num] > 0) ? (num_att_week_core[:sum_att_week]/num_att_week_core[:num]) : 0

                %td.text-right.bl{ :title => "Attendance for core from #{num_att_week_core[:num]} entries", :class => Attendance.get_status(att_week_core_avg,true) }
                  #{att_week_core_avg}%

              - if att_course_count > 0
                -# [Attendance (Course)] Average of 'Course' attendance. Should this be x[:course_type] => "overall" or "core" or "english" or "maths" or x.enrol_course.to_s.downcase == @topic.code.to_s.downcase
                - num_att_week_course = Attendance.where( :person_id => per_ids ).where( "lower(attendances.enrol_course) = ? ", @topic.code.to_s.downcase).where("week_beginning between str_to_date(?,'%Y-%m-%d') and str_to_date(?,'%Y-%m-%d')", d_from, d_to ).select("sum(attendances.att_week) as sum_att_week, count(*) as num").first
                - att_week_course_avg = (num_att_week_course[:num] > 0) ? (num_att_week_course[:sum_att_week]/num_att_week_course[:num]) : 0

                %td.text-right.bl{ :title => "Attendance for course from #{num_att_week_course[:num]} entries", :class => Attendance.get_status(att_week_course_avg,true) }
                  #{att_week_course_avg}%

              -# [Progress]
              - if x != "I"
                - pr_ids_progress = ProgressReview.where( :person_id => per_ids ).select( "progress_reviews.person_id", "progress_reviews.progress_id", "max(progress_reviews.id) as newest_id").where("progress_reviews.number = ?",x.to_i).joins(:progress).where("progresses.course_year=?",@topic.year).where("LOWER(course_code) = ?",@topic.code.to_s.downcase).group(["progress_reviews.person_id", "progress_reviews.progress_id"])
                -# .where("progress_reviews.created_at between str_to_date(?,'%Y-%m-%d') and str_to_date(?,'%Y-%m-%d')", d_from, d_to)
                -# .where("LOWER(course_type) = ?",'core')
                - pr_ids_max = ProgressReview.all.joins("INNER JOIN (#{pr_ids_progress.to_sql}) newest ON newest.newest_id = progress_reviews.id").select(" count(*) as num, count( case when lower(progress_reviews.level) in('purple','green') then 1 else null end ) as mettarget ").first
                - progress_avg = (pr_ids_max[:num] > 0) ? (100.0 / pr_ids_max[:num] * pr_ids_max[:mettarget] ).round : 0

              - if x == "I"
                %td.text-right.ragp_light_grey.bl{ :title => "Progress" }
              - else
                %td.text-right.bl{ :title => " Progress for course #{pr_ids_max[:mettarget]} out of #{pr_ids_max[:num]}", :class => ( progress_avg >= 75 ) ? "ragp_light_green" : "ragp_light_red" }
                  #{progress_avg}%

              -# [Functional Skills Attendance]
              - num_att_week_fs = Attendance.where( :person_id => per_ids ).where( "course_type in ('fs english','fs maths')" ).where("week_beginning between str_to_date(?,'%Y-%m-%d') and str_to_date(?,'%Y-%m-%d')", d_from, d_to ).select("sum(attendances.att_week) as sum_att_week, count(*) as num").first
              - att_week_avg_fs = (num_att_week_fs[:num] > 0) ? (num_att_week_fs[:sum_att_week]/num_att_week_fs[:num]) : 0

              -# %td.text-right.bl{ :title => "Function Skills Attendance", :class => (att_week_avg_fs >= 90) ? "ragp_light_green" : "ragp_light_red" }
              %td.text-right.bl{ :title => "Function Skills Attendance", :class => Attendance.get_status(att_week_avg_fs,true) }
                #{att_week_avg_fs}%

              -# [Functional Skills Achievement]
              - if x == (npr.to_s)

                - per_ids = @person_courses.map{ |x| x[:person_id] }.compact

                - pc_num_ach = PersonCourse.where( :person_id => per_ids ).where( :mis_status => ['active', 'compnoresult', 'compnotach', 'compach', 'comppart', 'compnoresult', 'compachnofund'] ).joins(:course).where( "courses.code like 'FS%' ").where( "courses.year = ?", @topic.year ).select(" count(*) as num, count( case when person_courses.mis_status = 'compach' then 1 else null end ) as no_achieved").first
                - fs_achievement_avg = (pc_num_ach[:num] > 0) ? (100.0 / pc_num_ach[:num] * pc_num_ach[:no_achieved] ).round : 0

              - if x != (npr.to_s)
                %td.text-right.ragp_light_grey.bl{ :title => "Function Skills Achievement" }
              - else
                %td.text-right.bl{ :title => "Function Skills Achievement #{pc_num_ach[:no_achieved]} out of #{pc_num_ach[:num]}", :class => ( fs_achievement_avg >= 50 ) ? "ragp_light_green" : "ragp_light_red" }
                  #{fs_achievement_avg}%

        %tfoot
          %tr
            %td{:colspan => 3 + (att_overall_count > 0 ? 1 : 0) + (att_core_count > 0 ? 1 : 0) + (att_course_count > 0 ? 1 : 0)}
            %td.text-center
%br
.pull-right
  .btn-group.dropup
    %button.btn.btn-default.dropdown-toggle{"data-toggle" => "dropdown"}
      %i.fa.fa-download.fa-fw
      Download
      %span.caret
    %ul.dropdown-menu.dropdown-menu-right
      %li
        %a{"data-download-table" => "#progress-plp-table", "data-download-type" => "excel"} 
          %i.fa.fa-fw.fa-file-excel-o
          Excel
      %li
        %a{"data-download-table" => "#progress-plp-table", "data-download-type" => "csv"} 
          %i.fa.fa-fw.fa-file-o
          CSV

:coffeescript
  jQuery(document).ready ->
    fixCol1("progress-plp-table")
